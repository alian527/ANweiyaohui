low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation"
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(
angle = 45, vjust = 1, size = 12, hjust = 1
)
) +
ggplot2::coord_fixed() +
ggplot2::geom_text(
aes(
label = dplyr::case_when(
z > 0.01 & z <= 0.05 ~ "*",
z > 0.001 & z <= 0.01 ~ "**",
z <= 0.001 ~ "***",
TRUE ~ ""
)
),
color = "black", size = 10
)
print(s)
} else if (n == 2) {
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
} else if (n == 3) {
cat("\nP-value Matrix:\n")
print(pvalue_matrix)
} else {
cat("Invalid value for 'n'. Please use 1 for heatmap, 2 for correlation matrix, or 3 for p-value matrix.")
}
}
df <- read_excel("原始数据.xlsx")
df1=df[1:42,c(12:19,23:26)]
df1 <- data.frame(lapply(df1, as.numeric))
t=splitheatmap(df1,8,n=1)
t
c=splitheatmap(df1,8,n=2)
c
b=splitheatmap(df1,8,n=3)
b
windows(width = 8, height = 6)
t
library(graphics)
library(PerformanceAnalytics)
library(sjPlot)
library(reshape2)
library(dplyr)
library(ggplot2)
library(readxl)
rm(list = ls())#清空数据
#函数部分
splitheatmap <- function(df1, m, n) {
x <- ncol(df1)
var1 <- colnames(df1)[1:m]
var2 <- colnames(df1)[(m+1):x]
cor_matrix <- matrix(NA, nrow = x - m, ncol = m)
pvalue_matrix <- matrix(NA, nrow = x - m, ncol = m)
for (i in 1:m) {
for (j in 1:(x - m)) {
cor_test <- cor.test(df1[, var1[i]], df1[, var2[j]])
cor_matrix[j, i] <- cor_test$estimate
pvalue_matrix[j, i] <- cor_test$p.value
}
}
o <- colnames(df1[, 1:m])
p <- colnames(df1[, (m + 1):x])
cor_matrix <- data.frame(cor_matrix)
row.names(cor_matrix) <- p
names(cor_matrix) <- o
cor_matrix <- as.matrix(cor_matrix)
if (n == 1) {
cor <- reshape2::melt(cor_matrix, na.rm = TRUE)
pval <- reshape2::melt(pvalue_matrix, na.rm = TRUE)
corr <- cbind(cor, pval[, 3])
names(corr) <- c("y", "x", "c", "z")
s <- ggplot2::ggplot(data = corr, ggplot2::aes(x, y, fill = c)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient2(
low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation"
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(
angle = 45, vjust = 1, size = 12, hjust = 1
)
) +
ggplot2::coord_fixed() +
ggplot2::geom_text(
aes(
label = dplyr::case_when(
z > 0.01 & z <= 0.05 ~ "*",
z > 0.001 & z <= 0.01 ~ "**",
z <= 0.001 ~ "***",
TRUE ~ ""
)
),
color = "black", size = 10
)
print(s)
} else if (n == 2) {
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
} else if (n == 3) {
cat("\nP-value Matrix:\n")
print(pvalue_matrix)
} else {
cat("Invalid value for 'n'. Please use 1 for heatmap, 2 for correlation matrix, or 3 for p-value matrix.")
}
}
df <- read_excel("原始数据.xlsx")
df1=df[1:42,c(12:19,23:26)]
df1 <- data.frame(lapply(df1, as.numeric))
df2=df1[,9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
View(df1)
df0=df1[,9:12]
View(df0)
View(df0)
View(df0)
View(df0)
df0=df1[,9:12]
df2=df1[c(-1,-5,13,14,23),9:12]
df0=df1[,9:12]
df2=df1[c(-1,-5,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
View(df0)
View(df2)
View(df0)
df0=df1[,9:12]
df2=df1[c(-1,-5,-13,-9,-12,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-9,-12,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-9,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-12,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-5,-12,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-12,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-9,-13,-14),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-9,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
df0=df1[,9:12]
df2=df1[c(-1,-5,-9,-12,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",)
# 加载 ggplot2 库
library(ggplot2)
# 创建一个示例数据框
data <- data.frame(
variable1 = c(1, 2, 3, 4, 5),
variable2 = c(5, 4, 3, 2, 1),
variable3 = c(2, 4, 6, 8, 10)
)
# 计算斯皮尔曼相关系数
cor_matrix <- cor(data, method = "spearman")
# 提取斯皮尔曼相关系数
spearman_corr <- cor_matrix[2, 1]
# 绘制散点图和非参数回归线
ggplot(data, aes(x = variable1, y = variable2)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, method.args = list(rank = TRUE)) +
labs(title = paste("Spearman Correlation:", round(spearman_corr, 2)))
??chart.Correlation
df0=df1[,9:12]
df2=df1[c(-1,-5,-9,-12,-13,-14,-23),9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",method ="spearman")
df0=df1[,9:12]
df2=df1[,9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",method ="spearman")
??cor
result=cor(df2,method ="spearman")
result=as.data.frame(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
p_value_matrix <- matrix(NA, nrow = ncol(df2), ncol = ncol(df2))
for (i in 1:(ncol(df2)-1)){
for (j in (i+1):ncol(df2)){
cor_test <- cor.test(df2[,i], df2[,j])
p_value_matrix[i,j] <- cor_test$p.value
p_value_matrix[j,i] <- cor_test$p.value
}
}
result=p_value_matrix
result=as.data.frame(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
p_value_matrix <- matrix(NA, nrow = ncol(df2), ncol = ncol(df2))
for (i in 1:(ncol(df2)-1)){
for (j in (i+1):ncol(df2)){
cor_test <- cor.test(df2[,i], df2[,j],method ="spearman")
p_value_matrix[i,j] <- cor_test$p.value
p_value_matrix[j,i] <- cor_test$p.value
}
}
result=p_value_matrix
result=as.data.frame(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
View(p_value_matrix)
t=splitheatmap(df1,8,"spearman",1)
df <- read_excel("原始数据.xlsx")
library(graphics)
library(PerformanceAnalytics)
library(sjPlot)
library(reshape2)
library(dplyr)
library(ggplot2)
library(readxl)
rm(list = ls())#清空数据
#函数部分
splitheatmap <- function(df1, m, method, n) {
x <- ncol(df1)
var1 <- colnames(df1)[1:m]
var2 <- colnames(df1)[(m+1):x]
cor_matrix <- matrix(NA, nrow = x - m, ncol = m)
pvalue_matrix <- matrix(NA, nrow = x - m, ncol = m)
for (i in 1:m) {
for (j in 1:(x - m)) {
if (method == "pearson") {
cor_test <- cor.test(df1[, var1[i]], df1[, var2[j]])
} else if (method == "spearman") {
cor_test <- cor.test(df1[, var1[i]], df1[, var2[j]], method = "spearman")
} else {
cat("Invalid value for 'method'. Please use 'pearson' or 'spearman'.")
return(NULL)
}
cor_matrix[j, i] <- cor_test$estimate
pvalue_matrix[j, i] <- cor_test$p.value
}
}
o <- colnames(df1[, 1:m])
p <- colnames(df1[, (m + 1):x])
cor_matrix <- data.frame(cor_matrix)
row.names(cor_matrix) <- p
names(cor_matrix) <- o
cor_matrix <- as.matrix(cor_matrix)
if (n == 1) {
cor <- reshape2::melt(cor_matrix, na.rm = TRUE)
pval <- reshape2::melt(pvalue_matrix, na.rm = TRUE)
corr <- cbind(cor, pval[, 3])
names(corr) <- c("y", "x", "c", "z")
s <- ggplot2::ggplot(data = corr, ggplot2::aes(x, y, fill = c)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient2(
low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Correlation"
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(
angle = 45, vjust = 1, size = 12, hjust = 1
)
) +
ggplot2::coord_fixed() +
ggplot2::geom_text(
aes(
label = dplyr::case_when(
z > 0.01 & z <= 0.05 ~ "*",
z > 0.001 & z <= 0.01 ~ "**",
z <= 0.001 ~ "***",
TRUE ~ ""
)
),
color = "black", size = 10
)
print(s)
} else if (n == 2) {
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
} else if (n == 3) {
cat("\nP-value Matrix:\n")
print(pvalue_matrix)
} else {
cat("Invalid value for 'n'. Please use 1 for heatmap, 2 for correlation matrix, or 3 for p-value matrix.")
}
}
df <- read_excel("原始数据.xlsx")
df1=df[1:42,c(12:19,23:26)]
df1 <- data.frame(lapply(df1, as.numeric))
t=splitheatmap(df1,8,"spearman",1)
windows(width = 8, height = 6)
t
c=splitheatmap(df1,8,"spearman",n=2)
c
b=splitheatmap(df1,8,"spearman",n=3)
b
c=as.data.frame(c)
c$RowNames <- rownames(c)
c <- c[, c(ncol(c), 1:(ncol(c)-1))]
table_output <- tab_df(c)
print(table_output)
b <- as.data.frame(b)
b$RowNames <- rownames(b)
b <- b[, c(ncol(b), 1:(ncol(b)-1))]
table_output <- tab_df(b)
print(table_output)
df0=df1[,9:12]
df2=df1[,9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",method ="spearman")
result=cor(df2,method ="spearman")
result=as.data.frame(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
p_value_matrix <- matrix(NA, nrow = ncol(df2), ncol = ncol(df2))
print(table_output)
c=as.data.frame(c)
c$RowNames <- rownames(c)
c <- c[, c(ncol(c), 1:(ncol(c)-1))]
table_output <- tab_df(c)
print(table_output)
View(c)
b=splitheatmap(df1,8,"spearman",n=3)
b
b <- as.data.frame(b)
b$RowNames <- rownames(b)
b <- b[, c(ncol(b), 1:(ncol(b)-1))]
table_output <- tab_df(b)
print(table_output)
c=splitheatmap(df1,8,"spearman",n=2)
c
c=as.data.frame(c)
c$RowNames <- rownames(c)
c <- c[, c(ncol(c), 1:(ncol(c)-1))]
table_output <- tab_df(c)
print(table_output)
library(graphics)
library(PerformanceAnalytics)
library(sjPlot)
library(reshape2)
library(dplyr)
library(ggplot2)
library(readxl)
rm(list = ls())#清空数据
#函数部分
splitheatmap <- function(df1, m, method, n) {
x <- ncol(df1)
var1 <- colnames(df1)[1:m]
var2 <- colnames(df1)[(m+1):x]
cor_matrix <- matrix(NA, nrow = x - m, ncol = m)
pvalue_matrix <- matrix(NA, nrow = x - m, ncol = m)
for (i in 1:m) {
for (j in 1:(x - m)) {
if (method == "pearson") {
cor_test <- cor.test(df1[, var1[i]], df1[, var2[j]])
} else if (method == "spearman") {
cor_test <- cor.test(df1[, var1[i]], df1[, var2[j]], method = "spearman")
} else {
cat("Invalid value for 'method'. Please use 'pearson' or 'spearman'.")
return(NULL)
}
cor_matrix[j, i] <- cor_test$estimate
pvalue_matrix[j, i] <- cor_test$p.value
}
}
o <- colnames(df1[, 1:m])
p <- colnames(df1[, (m + 1):x])
cor_matrix <- data.frame(cor_matrix)
row.names(cor_matrix) <- p
names(cor_matrix) <- o
cor_matrix <- as.matrix(cor_matrix)
if (n == 1) {
cor <- reshape2::melt(cor_matrix, na.rm = TRUE)
pval <- reshape2::melt(pvalue_matrix, na.rm = TRUE)
corr <- cbind(cor, pval[, 3])
names(corr) <- c("y", "x", "c", "z")
s <- ggplot2::ggplot(data = corr, ggplot2::aes(x, y, fill = c)) +
ggplot2::geom_tile() +
ggplot2::scale_fill_gradient2(
low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Correlation"
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text.x = ggplot2::element_text(
angle = 45, vjust = 1, size = 12, hjust = 1
)
) +
ggplot2::coord_fixed() +
ggplot2::geom_text(
aes(
label = dplyr::case_when(
z > 0.01 & z <= 0.05 ~ "*",
z > 0.001 & z <= 0.01 ~ "**",
z <= 0.001 ~ "***",
TRUE ~ ""
)
),
color = "black", size = 10
)
print(s)
} else if (n == 2) {
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
} else if (n == 3) {
cat("\nP-value Matrix:\n")
print(pvalue_matrix)
} else {
cat("Invalid value for 'n'. Please use 1 for heatmap, 2 for correlation matrix, or 3 for p-value matrix.")
}
}
df <- read_excel("原始数据.xlsx")
df1=df[1:42,c(12:19,23:26)]
df1 <- data.frame(lapply(df1, as.numeric))
t=splitheatmap(df1,8,"spearman",1)
windows(width = 8, height = 6)
t
c=splitheatmap(df1,8,"spearman",n=2)
c
b=splitheatmap(df1,8,"spearman",n=3)
b
c=as.data.frame(c)
c$RowNames <- rownames(c)
df0=df1[,9:12]
df2=df1[,9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",method ="spearman")
result=cor(df2,method ="spearman")
result=as.data.frame(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
p_value_matrix <- matrix(NA, nrow = ncol(df2), ncol = ncol(df2))
df0=df1[,9:12]
df2=df1[,9:12]
chart.Correlation(df2,main = "Correlation Matrix",
xlab = "Variables",
ylab = "Variables",method ="spearman")

result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
View(df1)
df=read_excel("原始数据.xlsx",col_names = TRUE)
df = df[c(-7,-60),-1]
df2=df[c(1:42),c(5,2:4,9:25)]
df2$l1=log(df2$`TNF-a`)
df2$l2=log(df2$`IL-6`)
df2$l3=log(df2$`Claudin-5`)
df2$l4=log(df2$Zonulin)
View(df2)
result <- sxb(df2)
print(result)
View(df2)
library(openxlsx)
library(onewaytests)
library(sjPlot)
library(corrplot)
library(officer)
library(flextable)
library(table1)
library(boot)
library(ggplot2)
library(readxl)
library(bruceR)
library(corrplot)
library(RColorBrewer)
rm(list = ls())
#函数部分
sxb <- function(data) {
# 获取第一列的分类变量
groups <- unique(data[[1]])
# 创建一个空的结果数据框
result <- data.frame(matrix(NA, nrow = ncol(data) - 1, ncol = 4))
colnames(result) <- c(groups[1], groups[2], "t/z", "p")
rownames(result) <- colnames(data)[-1]
# 遍历除第一列之外的所有变量
for (i in 2:ncol(data)) {
variable <- colnames(data)[i]
values_a <- data[data[[1]] == groups[1], i]
values_b <- data[data[[1]] == groups[2], i]
n1 <- length(values_a)
n2 <- length(values_b)
if (is.numeric(values_a) && is.numeric(values_b)) {
# 检查每组至少有两个观察值
if (length(values_a) >= 2 && length(values_b) >= 2 && length(values_a) <= 5000 && length(values_b) <= 5000) {
if (shapiro.test(values_a)$p.value > 0.05 && shapiro.test(values_b)$p.value > 0.05) {
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- t.test(values_a, values_b)
t <- sprintf("%.3f", test_result$statistic)
result[variable, "t/z"] <- t
result[variable, "t/z"] <- paste(result[variable, "t/z"], "‡")
} else {
# 如果数据不服从正态分布或方差不相等
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- wilcox.test(values_a, values_b)
z = (test_result$statistic - (n1*n2/2))/(sqrt((n1*n2*(n1+n2+1))/12))
result[variable, "t/z"] <- sprintf("%.3f", z)
result[variable, "t/z"] <- paste(result[variable, "t/z"], "†")
}
p <- test_result$p.value
if (p < 0.001) {
p <- "<0.001"
} else {
p <- format(p, digits = 3)
}
# 根据p值添加显著性标记
if (p == "<0.001") {
result[variable, "p"] <- paste(p, "***")
} else if (p < 0.01) {
result[variable, "p"] <- paste(p, "**")
} else if (p < 0.05) {
result[variable, "p"] <- paste(p, "*")
} else {
result[variable, "p"] <- p
}
}
}
}
return(result)
}
df=read_excel("原始数据.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[c(-7,-60),-1]
df1=df[,c(1:4,9:25)]
df1$l1=log(df1$`TNF-a`)
df1$l2=log(df1$`IL-6`)
df1$l3=log(df1$`Claudin-5`)
df1$l4=log(df1$Zonulin)
result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
df=read_excel("原始数据.xlsx",col_names = TRUE)
df = df[c(-7,-60),-1]
df2=df[c(1:42),c(5,2:4,9:25)]
df2$l1=log(df2$`TNF-a`)
df2$l2=log(df2$`IL-6`)
df2$l3=log(df2$`Claudin-5`)
df2$l4=log(df2$Zonulin)
result <- sxb(df2)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
View(df2)
View(df1)
View(df2)
View(df1)
View(df2)
result <- sxb(df1)
print(result)
result <- sxb(df2)
print(result)
View(df2)
View(df1)
View(df2)
View(df1)
View(df1)
View(df2)
View(df1)
View(df2)
df=read_excel("原始数据.xlsx",col_names = TRUE)
View(df)
df <- as.data.frame(df)
rownames(df) = df[,1]
View(df)
df=read_excel("原始数据.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[c(-7,-60),-1]
df2=df[c(1:42),c(5,2:4,9:25)]
df2$l1=log(df2$`TNF-a`)
df2$l2=log(df2$`IL-6`)
df2$l3=log(df2$`Claudin-5`)
df2$l4=log(df2$Zonulin)
View(df1)
View(df2)
result <- sxb(df2)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
rm(list = ls())
#函数部分
sxb <- function(data) {
# 获取第一列的分类变量
groups <- unique(data[[1]])
# 创建一个空的结果数据框
result <- data.frame(matrix(NA, nrow = ncol(data) - 1, ncol = 4))
colnames(result) <- c(groups[1], groups[2], "t/z", "p")
rownames(result) <- colnames(data)[-1]
# 遍历除第一列之外的所有变量
for (i in 2:ncol(data)) {
variable <- colnames(data)[i]
values_a <- data[data[[1]] == groups[1], i]
values_b <- data[data[[1]] == groups[2], i]
n1 <- length(values_a)
n2 <- length(values_b)
if (is.numeric(values_a) && is.numeric(values_b)) {
# 检查每组至少有两个观察值
if (length(values_a) >= 2 && length(values_b) >= 2 && length(values_a) <= 5000 && length(values_b) <= 5000) {
if (shapiro.test(values_a)$p.value > 0.05 && shapiro.test(values_b)$p.value > 0.05) {
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- t.test(values_a, values_b)
t <- sprintf("%.3f", test_result$statistic)
result[variable, "t/z"] <- t
result[variable, "t/z"] <- paste(result[variable, "t/z"], "‡")
} else {
# 如果数据不服从正态分布或方差不相等
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- wilcox.test(values_a, values_b)
z = (test_result$statistic - (n1*n2/2))/(sqrt((n1*n2*(n1+n2+1))/12))
result[variable, "t/z"] <- sprintf("%.3f", z)
result[variable, "t/z"] <- paste(result[variable, "t/z"], "†")
}
p <- test_result$p.value
if (p < 0.001) {
p <- "<0.001"
} else {
p <- format(p, digits = 3)
}
# 根据p值添加显著性标记
if (p == "<0.001") {
result[variable, "p"] <- paste(p, "***")
} else if (p < 0.01) {
result[variable, "p"] <- paste(p, "**")
} else if (p < 0.05) {
result[variable, "p"] <- paste(p, "*")
} else {
result[variable, "p"] <- p
}
}
}
}
return(result)
}
df=read_excel("原始数据.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[c(-7,-60),-1]
df2=df[c(1:42),c(5,2:4,9:25)]
df2$l1=log(df2$`TNF-a`)
df2$l2=log(df2$`IL-6`)
df2$l3=log(df2$`Claudin-5`)
df2$l4=log(df2$Zonulin)
result <- sxb(df2)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
# 原始的p-value
p_values <- c(,0.0176,0.038, 0.203,0.317 )
p_values <- c(0.0176,0.038, 0.203,0.317)
fdr_adjusted_p_values <- p.adjust(p_values, method = "fdr")
fdr_adjusted_p_values
p_values <- c(0.038, 0.0176, 0.317, 0.203)
adjusted_p_values <- p.adjust(p_values, method = "fdr")
adjusted_p_values
library(openxlsx)
library(onewaytests)
library(sjPlot)
library(corrplot)
library(officer)
library(flextable)
library(table1)
library(boot)
library(ggplot2)
library(readxl)
library(bruceR)
library(corrplot)
library(RColorBrewer)
rm(list = ls())
#函数部分
sxb <- function(data) {
# 获取第一列的分类变量
groups <- unique(data[[1]])
# 创建一个空的结果数据框
result <- data.frame(matrix(NA, nrow = ncol(data) - 1, ncol = 4))
colnames(result) <- c(groups[1], groups[2], "t/z", "p")
rownames(result) <- colnames(data)[-1]
# 遍历除第一列之外的所有变量
for (i in 2:ncol(data)) {
variable <- colnames(data)[i]
values_a <- data[data[[1]] == groups[1], i]
values_b <- data[data[[1]] == groups[2], i]
n1 <- length(values_a)
n2 <- length(values_b)
if (is.numeric(values_a) && is.numeric(values_b)) {
# 检查每组至少有两个观察值
if (length(values_a) >= 2 && length(values_b) >= 2 && length(values_a) <= 5000 && length(values_b) <= 5000) {
if (shapiro.test(values_a)$p.value > 0.05 && shapiro.test(values_b)$p.value > 0.05) {
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- t.test(values_a, values_b)
t <- sprintf("%.3f", test_result$statistic)
result[variable, "t/z"] <- t
result[variable, "t/z"] <- paste(result[variable, "t/z"], "‡")
} else {
# 如果数据不服从正态分布或方差不相等
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- wilcox.test(values_a, values_b)
z = (test_result$statistic - (n1*n2/2))/(sqrt((n1*n2*(n1+n2+1))/12))
result[variable, "t/z"] <- sprintf("%.3f", z)
result[variable, "t/z"] <- paste(result[variable, "t/z"], "†")
}
p <- test_result$p.value
if (p < 0.001) {
p <- "<0.001"
} else {
p <- format(p, digits = 3)
}
# 根据p值添加显著性标记
if (p == "<0.001") {
result[variable, "p"] <- paste(p, "***")
} else if (p < 0.01) {
result[variable, "p"] <- paste(p, "**")
} else if (p < 0.05) {
result[variable, "p"] <- paste(p, "*")
} else {
result[variable, "p"] <- p
}
}
}
}
return(result)
}
df=read_excel("蛋白分组.xlsx",col_names = TRUE)
View(df)
View(df)
df=read_excel("蛋白分组.xlsx",col_names = TRUE)
View(df)
df <- as.data.frame(df)
View(df)
rownames(df) = df[,1]
df = df[,-1]
View(df)
View(df)
View(df)
df1=df[,c(23,2:4,11:21,24,26,28)]
View(df1)
result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
df=read_excel("蛋白分组.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[,-1]
df1=df[,c(25,2:4,11:21,22,26,28)]
result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
df=read_excel("原始数据.xlsx",col_names = TRUE)
result <- sxb(df2)
print(result)
result <- sxb(df2)
print(result)
library(openxlsx)
library(onewaytests)
library(sjPlot)
library(corrplot)
library(officer)
library(flextable)
library(table1)
library(boot)
library(ggplot2)
library(readxl)
library(bruceR)
library(corrplot)
library(RColorBrewer)
rm(list = ls())
#函数部分
sxb <- function(data) {
# 获取第一列的分类变量
groups <- unique(data[[1]])
# 创建一个空的结果数据框
result <- data.frame(matrix(NA, nrow = ncol(data) - 1, ncol = 4))
colnames(result) <- c(groups[1], groups[2], "t/z", "p")
rownames(result) <- colnames(data)[-1]
# 遍历除第一列之外的所有变量
for (i in 2:ncol(data)) {
variable <- colnames(data)[i]
values_a <- data[data[[1]] == groups[1], i]
values_b <- data[data[[1]] == groups[2], i]
n1 <- length(values_a)
n2 <- length(values_b)
if (is.numeric(values_a) && is.numeric(values_b)) {
# 检查每组至少有两个观察值
if (length(values_a) >= 2 && length(values_b) >= 2 && length(values_a) <= 5000 && length(values_b) <= 5000) {
if (shapiro.test(values_a)$p.value > 0.05 && shapiro.test(values_b)$p.value > 0.05) {
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- t.test(values_a, values_b)
t <- sprintf("%.3f", test_result$statistic)
result[variable, "t/z"] <- t
result[variable, "t/z"] <- paste(result[variable, "t/z"], "‡")
} else {
# 如果数据不服从正态分布或方差不相等
result[variable, groups[1]] <- paste(format(mean(values_a), digits = 2), "±", format(round(sd(values_a), digits = 2), digits = 2))
result[variable, groups[2]] <- paste(format(mean(values_b), digits = 2), "±", format(round(sd(values_b), digits = 2), digits = 2))
test_result <- wilcox.test(values_a, values_b)
z = (test_result$statistic - (n1*n2/2))/(sqrt((n1*n2*(n1+n2+1))/12))
result[variable, "t/z"] <- sprintf("%.3f", z)
result[variable, "t/z"] <- paste(result[variable, "t/z"], "†")
}
p <- test_result$p.value
if (p < 0.001) {
p <- "<0.001"
} else {
p <- format(p, digits = 3)
}
# 根据p值添加显著性标记
if (p == "<0.001") {
result[variable, "p"] <- paste(p, "***")
} else if (p < 0.01) {
result[variable, "p"] <- paste(p, "**")
} else if (p < 0.05) {
result[variable, "p"] <- paste(p, "*")
} else {
result[variable, "p"] <- p
}
}
}
}
return(result)
}
df=read_excel("药物.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[,-1]
View(df)
df1=df[,c(7,2:4,11:21,22,24,26,28)]
View(df1)
df=read_excel("药物.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[,-1]
df1=df[1:42,c(7,2:4,11:21,22,24,26,28)]
View(df1)
result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
View(df1)
df=read_excel("药物.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[,-1]
df1=df[1:42,c(7,2:4,11:21,22,24,26,28)]
View(df1)
result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
View(df1)
df=read_excel("药物.xlsx",col_names = TRUE)
df <- as.data.frame(df)
rownames(df) = df[,1]
df = df[,-1]
df1=df[1:42,c(8,2:4,11:21,22,24,26,28)]
result <- sxb(df1)
print(result)
# 将行名添加在第一列
result$RowNames <- rownames(result)
# 将其余4列向后移动一列
result <- cbind(result[, 5], result[, 1:4])
# 删除原始的行名列
result$RowNames <- NULL
# 将第一列的列名设置为空
colnames(result)[1] <- "变量"
table_output <- tab_df(result)
print(table_output)
View(df)
